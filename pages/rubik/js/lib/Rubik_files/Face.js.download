define(['three', 'app/Cubelet'], function(THREE){

	// function Face(center, top, right, bottom, left){
	// 	THREE.Group.call(this);
	// 	this.type = 'Face';


	// 	var face = this;
	// 	[[center],top,right,bottom,left].forEach(function(edge){
	// 		edge.forEach(function(c){
	// 			if(face.children.indexOf(c)<0){face.add(c);}
				
	// 		})
	// 	})
	// 	this.topEdge = top.slice(0);
	// 	this.rightEdge = right.slice(0);
	// 	this.bottomEdge = bottom.slice(0);
	// 	this.leftEdge = left.slice(0);
	// }

	// Face.prototype = Object.assign(Object.create(THREE.Group.prototype),{constructor: Face});

	// Face.prototype.requestChildren =function (face){
	// 	this.children.forEach(function(f){f.parent = face;});
	// }

	// Face.prototype.add = function ( object ) {

	// 		if ( arguments.length > 1 ) {

	// 			for ( var i = 0; i < arguments.length; i ++ ) {

	// 				this.add( arguments[ i ] );

	// 			}

	// 			return this;

	// 		}

	// 		if ( object === this ) {

	// 			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
	// 			return this;

	// 		}

	// 		if ( ( object && object.isObject3D ) ) {

	// 			// if ( object.parent !== null ) {

	// 			// 	object.parent.remove( object );

	// 			// }

	// 			object.parent = this;
	// 			object.dispatchEvent( { type: 'added' } );

	// 			this.children.push( object );

	// 		} else {

	// 			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

	// 		}

	// 		return this;

	// 	}

	// Face.prototype.translateOnAxis = function(axis, distance){
	// 	var v1 = new THREE.Vector3();

	// 	v1.copy( axis ).applyQuaternion( this.quaternion );

	// 	this.children.forEach(function(c){c.position.add(v1.multiplyScalar(distance));});
	// 	return this;

	// }

	// Face.prototype.rotateOnAxis = function(axis, angle){

	// 	var q1 = new THREE.Quaternion();
	// 	q1.setFromAxisAngle( axis, angle );

	// 	this.children.forEach(function(c){c.quaternion.multiply( q1 );});

	// 	return this;
	// }


	function Face(center, top, right, bottom, left){
		this.type = 'Face';
		this.edges = [top.slice(0), right.slice(0), bottom.slice(0), left.slice(0)];

		this.up = new THREE.Vector3().subVectors(center.position, top[1].position);
	}

	Face.prototype.rotateCW = function(){
		this.edges.forEach(function(e){
			e.forEach(function(c){
				c.rotateOnAxis(new THREE.Vector3(x,y,z))
			})
		})
	}

	return Face;
});